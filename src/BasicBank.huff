/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr dup1             // get function selector x2
    __FUNC_SIG(balanceOf) eq getBalance jumpi   // jump to getBalance function if selector matches
    __FUNC_SIG(withdraw) eq withdrawal jumpi    // jump to withdraw function if selector matches
    callvalue iszero iszero deposit jumpi       // if value is not zero we will jump to the deposit function
    0x00 0x00 return 

    deposit:
        caller 0x00 mstore                      // safe caller address to mem to get the hash for storage
        0x20 0x00 sha3 dup1                     // hash of address to get storage location * 2 [storageSlot, storageSlot]
        sload                                   // [balanceOf user, storageSlot]
        callvalue add swap1                     // add the amount sent [storageSlot, new balanceOf user]
        sstore 0x00 0x00 return                 // store the new value and return []

    getBalance:
        0x04 calldataload 0x00 mstore           // safe input address to memory to get the hash for storage []
        0x20 0x00 sha3                          // hash of address to get storage location [storageSlot]
        sload 0x00 mstore                       // loaded balance and stored in memory []
        0x20 0x00 return                        // return balance []

    withdrawal:
        caller 0x00 mstore                      // safe caller address to mem to get the hash for storage
        0x20 0x00 sha3                          // hash of address to get storage location [storageSlot]
        0x04 calldataload dup2                  // get input amount to withdraw [storageSlot, amount, storageSlot]
        sload dup1 swap2 swap1                  // [balance, amount, balance, storageSlot]
        0x01 add                                // add one to balance to check if balance >= amount
        gt payUser jumpi                        // checks if users balance is >= amount [balance, storageSlot]
        pop pop 0x00 0x00 revert                // if not it will pop off the 2 values and revert

    payUser:                                    // [balance, storageSlot]
        0x04 calldataload dup1 swap2            // [balance, amount, amount, storageSlot]
        sub                                     // [new balance, amount, storageSlot] 
        swap1 swap2                             // [storageSlot, new balance, amount] 
        sstore                                  // update storage before making external call [amount]
        0x00 dup1 dup1 dup1                     // [0, 0, 0, 0, amount]
        swap4                                   // [amount, 0, 0, 0, 0]
        caller gas                              // [gas, caller address, amount, 0, 0, 0, 0]
        call
        0x00 0x00 return 
}   
