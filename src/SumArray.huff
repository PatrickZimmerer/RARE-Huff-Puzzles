
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that
 *  takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr  // get function selector (first 4 bytes)
    __FUNC_SIG(sumArray) eq sumArr jumpi
    0x00 0x00 revert

    sumArr:
        0x45 calldatasize lt 
        ret jumpi                       // jumps to the end if calldatasize is 4 bytes or lower
        0x44 calldatasize sub           // removes 44 bytes (func selector, pointer to memory location & length of the array)
        // now we need to loop and reduc eour number on the stack by 32 bytes each iteration and add to our result
        // until we hit 0 on that number then we have used up every number in the array
        0x00 0x44 swap2                 // add one index for calldata counter to load the correct calldata
        // [calldatasize - 44 bytes, 0, 44] setup stack for loop
        // 44 will become our "getNextItem" and 0 will be "sum"
    loop:   
        // loads the first value and saves the 44 bytes which will be increased after
        // I will call the result "sum" the remaining amount of calldatas we need to load "restData"
        // and the number that keeps track of the next item we need to get "getNextItem"
        swap2
        dup1 calldataload               // [new array item, getNextItem, restData]
        swap1 swap2 add                 // [sum + new value, getNextItem, restData]
        // now we need to increase our getNextItem for 32 bytes & reduce our remaining calldatasize  for 32 bytes
        swap1 0x20 add                  // [getNextItem + 32 bytes, sum, restData]
        swap2 0x20 swap1 sub            // [restData - 32 bytes, getNextItem, sum]
        dup1                            // [restData, restData, getNextItem, sum]
        iszero iszero loop jumpi        // if there is more calldata loop again  
        pop 0x00 mstore pop             // else we store the value at memory 0x00
        ret jump                        // jumps to the end when there is no more data

    ret:
        0x20 0x00 return                // will just return if no calldata was sent
}
//0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000010