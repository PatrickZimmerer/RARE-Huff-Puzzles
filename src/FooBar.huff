
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can 
 *  specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr dup1     // [first 4 bytes of calldata (function selector) x 2]
    __FUNC_SIG(foo) eq foo jumpi        // will check if the function selector is correct and jump to multiply if true 
    __FUNC_SIG(bar) eq bar jumpi        // same as above but checking the other function selector
    0x00 0x00 revert

    foo:
        0x02 0x00 mstore                // stores value "0x02" at memory 0x00 
        0x20 0x00 return                // returns first 32 bytes of memory where value is stored

    bar:
        0x03 0x00 mstore
        0x20 0x00 return

}