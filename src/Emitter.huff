 #include "./Console.huff"
 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)


 #define macro MAIN() = takes(0) returns(0) {
    LOG_CALLDATA(0x00, calldatasize, 0x00)
    0x00 calldataload 0xe0 shr          // get func selector [selector]
    __FUNC_SIG(value) eq value jumpi    // jumps if the right selector is chosen
    0x00 0x00 revert

    value:
        0x04 calldataload               // push first input to the stack (indexed = needs to be in log) [1st number]
        __EVENT_HASH(Value)             // push event signature to stack [signature, 1st number]
        0x40 0x00                       // size & offset [0, 64, signature, 1st number]
        log2                            // emits the event
        0x00 0x00 return                // []
 }
